# Jeap 2.0 Development Record

### Core Scripts:

- jeap.py
- ~~lease_listen.py~~
  - ~~sample~~  dhcpd.leases
  - ~~known_host.txt~~ ==> known_host list

### Development Thoughts:
 `thinking about do it in multithread`
 1. Initialization phase:
   - [x] Web scraping with help of BeautifulSoup
   - [x] Get key info from JTAC Recommended Version webpage
   - [x] Store info into a local dictionary, periodically refresh
   - [x] Key attributes are **model**, **Junos version**

 2. Start listening(_always running_):
   - [x] Check _dhcp.lease_ frequently
   - [ ] Compare( ~~hash function or so~~  `in` for string) with known ips stored locally(private list)
   - [ ] found new ip(s), put into a private list(~~arraylist, stack, queue etc.~~ `list`)

 3. jeap.py phase:
   * Get private dictionary
   * Read new hosts from ips in queue, open connection to get their current configuration, and store into a dictionary
   * Compare current software version with recommended ones
     * If need updates, delete this address from known_host list,reach out to download latest version and autoinstall __lots of work__, and start all over again 
     * If not, continue
   * Based on known info, gather config files based on some customer policy(e.g. MAC, #sn, ip, subnet etc.)
   * more thoughts on `Policy` and `File Assembly Module`

###  Brief History
 Weekly summary :sunny: Sep 18 2015
 - SecIntel for a whole day :pizza: :tropical_drink:
 - run another python online tutorial for 2 days :sleepy:
 - installed 'Pycharm' for python IDE environment, makes my life so much easier :kissing_smiling_eyes:
 - finished optimizing scraper_bike() inherited from Logan, use a thread to constantly refreshing it :+1:
 - finished optimizing lease_read() inherited from Logan, use another thread to periodically update. Able to automatically extract ip addresses from *dhcpd.leases* file ranging from '0.0.0.0 to 255.255.255.255' with help of __regular expresion__, a tough one, spent a lot of time. May need to change a little bit for the range in the future. :+1:

:question:Potential Questions: 
 - is there a way to change the sleep time interval for threading, e.g. stop threading -> set new time value -> restart threading :scream:

:date: Next Week:
- [x] NYC for 3 days, potential customer meetings + Pope come
- [ ] Some time for SecIntel before Shruti leave
- [x] Start working on core part for jeap.py


:cloud: Sep 22 2015 Tues
- [x] talked to Maltimore, went over some questions, make some decisions:
       - need to reach out to download right Junos version if outdated
       - could ask user to input credentials before they start running jeap scripts
       - also could store Junos local
- [x] assembled a new `.conf` file from different parts, didn't play with logic since it's highly usecase based and should be a matter of time.


:sunny: Sep 23 2015 Wed

Encountered a big problem: the web page content I get from browser is very different from Python programme, cannot find useful like at all, regardless of web scraping. Few possible causes:
 - [x] approach from programme and browser is different by default, change web request header in python, which doesn't work right now
 - [x] web browser uses http get while url `Request` from python uses http post, not sure about this, leaning python documents on [urllib](https://docs.python.org/2/howto/urllib2.html "URL FETCH"), doesn't work either
 - [x] browser allow javascript to run while python programme doesn't, in browser, the desired link is burried under paragraph `<div id = 'wrap'>`, while in the content python programme fetch from internet, nothing is under that line. After some search at the end of the day, it shows that third party tool is needed to stimulate browser in order to get javascript running. This is a :question: for furthur develop of Jeap.


:sunny: Sep 25 2015 Fri

:large_orange_diamond: __Problem solved__

The whole table for SRX Junos download on Juniper web page is dynamically generated by javascript, after some research, decided to go with one tool named __selenium__ to simulate browser, thinking that maybe our future CentOS Server has to be GUI based since minimum version which only have CLI interface won't be able to initiate a web browser.

Now stucked at __downloading__ phase, need more research on explicit wait until the download session ends. Also need to think what if a download process stopped halfway.
Then need to think how to make it a little bit easier by using tftp server to store os image locally.
Do it step by step :feet:, don't be too harsh.
- [x] talk to Maltimore :bowtie: about that next week, see what's his opnion

Anyway, __HAPPY MID-AUTUMN DAY!__ :stars: :stars: :full_moon: :stars: :stars:  :u6708: 

:cloud: Sep 29 Tue.

New problem show up yesterday. Didn't find a desired waiting method. It is said that we can control browser but are not able to take browser's feedback. One mentioned method was constantly checking file size, once it finished downloading, the file size should remain unchanged. Then I focused on file downloading, only to realize that i am not able to do it, it pop up a new windown asking do I want to save it, the `cancle` button was active all the time while the `save` button was grey all the time. I tried to wait 4 min, still unactivated. Start to doubt whether this method was doable at the end, and start to take  work flow of the whole project into consideration.

Plan to hack around that issue a little bit more today and work on other parts of this project.

__Weekly Summary__

__Oct 2 Fri__ :umbrella: :cloud:

Generally. this is a **slow week**. get a lot of **unexpected issues and bugs**, didn't get through them after a long time hack. In some bulletin points, briefly summarize what I have done so far.

- Confirmed that those tables in download page are generated by JavaScript which cannot retrieve by any program :pencil:, so call a headless browser called __selenium__ to simulate real browser. Got credentials and agreement settled while the `save` button in new poped up window never turned active.
- Talked to Stephan about that, he agreed on leave it there and accepted employing FTP/SFTP server to store Junos files locally and push Junos version down through secure session when needed. emphasised focusing on branch SRX
- Get around with download issue after hacking with `Jeff Polanco` by scraping the final link with my username and hashed password (which changes with time BTW) at end and then call Python built-in library to fetch that. **It's download under michelle, not under root**
- Did a lot of reading on FTP/SFTP/VSFTP (step-by-step online tutorials are much less compared to TFTP and DHCP), due to the lack of my knowledge, I started with the easiest __FTP__, followed [this tutorial](http://www.unixmen.com/install-vsftpd-server-on-centos-rhel-scientific-linux-6-4/) as an anonymous FTP server. The detailed case is like that:
  - [x] could login in format `ftp 192.168.60.5` through default username `ftp`, don't actually need password, log file is under `/var/log/ftp(?)`
  - [x] could download small files like `test.txt(5KB)` and `selenium.jar(50MB)`
  - [ ] couldn't download Junos pack like `junos-srxme-12.1X45-D13.1-domestic.tgz`, made it to `chmod 777`, still didn't work. error message was `550 Failed to open file`, seems a permission issue from online reading
  - [x] vSRX could do it manually in shell, also with small package
  - [ ] vSRX couldn't get large package
  - [ ] vSRX couldn't get it from operational mode in a single line of command `request system software add ftp://username:192.168.60.5`
- Did a __SFTP__ server on Friday following [this link](http://www.thegeekstuff.com/2012/03/chroot-sftp-setup/), could login with user and password, ran into another permission issue since command `ls` is not accepted, get a error message `readdir bla: Permission Denied`, not even mention download file. I did some reading on permission, but didn't get it solved.

__Plan For Next Week:__

- [ ] Check-in with Marcelino :man: Monday. see what's his suggestions. It would be much better for me to get some directions rather than wandering by myself
- [ ] Try to have both servers working in vSRX before leave for NYC
- [ ] Try to enter the wrap-up phase of this project by the end of next week. :pray: #finger_crossed


__Oct 5 Monday__

Didn't see Marcelino :man: today since he is not in the office, but I figured it out throught A LOT trial and error :exclamation: The :lock: that has been stopping me is the __enforcing mode__ of __SELinux__, thought I am not so familiar with that, it has blocked 'untrust' operations, I guess I should disable it in the future since it has caused me so much trouble. Anyway, found the key now :closed_lock_with_key:

Working towards next step!


__Oct 8 Thursday__

Just finished a brief demo to Stephan and Maltimire, not very smoothly mostly due to unrealiable wireless Pulse connection, there are system glitches, add one more exception catch in jeap.py just to give it a try one one more time.

Anyway, after solving permission issue in Linux, I looked into PyEz library, just found there was no need to establish (s)ftp server at all, there're calls named `sw.install()` and `sw.reboot()` can deal with all of that in a secure manner. So I quickly went through all the PyEz library and wrote a function based on that. 

Travelled to NYC on Wednsday, started to putting everything together and in a good manner. So what I did was to seperate main logic from detailed and repetitious function labor, I wrote reorganized two python scriot, one named `jeap.py` is the mainframe, and the other named `tools.py` contains all the functions I am going to need for jeap, made `tools` call inside `jeap`.

One thing I discovered yesterday was that JTAC recommended version is one or two version back than the latest ones, so my previous way of downloading the first (as well as the latest junos version) entry on that download table was not proper, besides that the version showed on download webpage is shorter than the version real version number and the ones in JTAC recommended webpage, so I build another function called `junos_version_compare`. Now the principle is: if the junos version on box is later than or equal to JTAC recommended Junos version, we just leave it there, else we reach out to push down JTAC recommended version on box.

Up to know, fixed most of the bugs met, system glitch is a little beyond me, going to wirte a more official documentation tomorrow!
